
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output 			[7:0]		VGA_B,
	output		          		VGA_CLK,
	output  		[7:0]		VGA_G,
	output		          		VGA_HS,
	output  		[7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	//ADC Values
	wire [11:0] adc_values [7:0];
	wire [10:0] temp_c;
	wire [11:0] temp_f;
	assign LEDR = adc_values [0] [11:1];

//=======================================================
//  Structural coding
//=======================================================

display_controller display(
	.CLOCK_50(CLOCK_50),
	.MODULE1_STATUS(~KEY),	//Set to keybuttons for testing
	.TEMP_F(SW),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_R(VGA_R),
	.VGA_G(VGA_G),
    .VGA_B(VGA_B),
	.VGA_VS(VGA_VS),
    .VGA_HS(VGA_HS)
);

adc_controller ADC (
	.CLOCK (CLOCK_50),
	.RESET (!KEY[0]),
	.ADC_SCLK (ADC_SCLK),
	.ADC_CS_N (ADC_CONVST),
	.ADC_DOUT (ADC_DOUT),
	.ADC_DIN (ADC_DIN),
	.CH0 (adc_values[0]),
	.CH1 (adc_values[1]),
	.CH2 (adc_values[2]),
	.CH3 (adc_values[3]),
	.CH4 (adc_values[4]),
	.CH5 (adc_values[5]),
	.CH6 (adc_values[6]),
	.CH7 (adc_values[7])
);

voltage_to_temp v_to_temp (
	.clk (CLOCK_50),
	.voltage (adc_values [0]),
	.temp_c_signed(temp_c),
	.temp_f_signed(temp_f)
);

val_to_seven_seg hex0 (
	.clk (CLOCK_50),
	.value (temp_f[3:0]),
	.display_segs (HEX0)
);

val_to_seven_seg hex1 (
	.clk (CLOCK_50),
	.value (temp_f[7:4]),
	.display_segs (HEX1)
);

val_to_seven_seg hex2 (
	.clk (CLOCK_50),
	.value ({1'b0, temp_f[10:8]}),
	.display_segs (HEX2)
);



endmodule
