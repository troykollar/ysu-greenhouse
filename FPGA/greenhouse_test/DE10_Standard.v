
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input		         		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output			 [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIOGPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [11:0] values [7:0];
assign LEDR = values [7] [11:1];

//=======================================================
//  Structural coding
//=======================================================

adc_controller ADC (
	.CLOCK (CLOCK_50),
	.RESET (!KEY[0]),
	.ADC_SCLK (ADC_SCLK),
	.ADC_CS_N (ADC_CONVST),
	.ADC_DOUT (ADC_DOUT),
	.ADC_DIN (ADC_DIN),
	.CH0 (values[0]),
	.CH1 (values[1]),
	.CH2 (values[2]),
	.CH3 (values[3]),
	.CH4 (values[4]),
	.CH5 (values[5]),
	.CH6 (values[6]),
	.CH7 (values[7])
);

val_to_seven_seg hex0 (
	.clk (CLOCK_50),
	.value (values [7] [3:0]),
	.display_segs (HEX0)
);

val_to_seven_seg hex1 (
	.clk (CLOCK_50),
	.value (values [7] [7:4]),
	.display_segs (HEX1)
);

val_to_seven_seg hex2 (
	.clk (CLOCK_50),
	.value (values [7] [11:8]),
	.display_segs (HEX2)
);

endmodule
